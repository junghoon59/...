-> cd /Yolo_mark/x64/Release/data
// 경로에 들어가게 되면 obj.data , obj.names , yolo-obj.cfg  세가지 파일이 존재한다.
// obj.data 는 classes 를 설정할 수 있는데, 몇가지의 객체 즉 몇가지의 수화를 인식하고 학습시킬 건지를 설정할 수 있다.
// 그 밖에 학습시킨 내용은 어디로 저장되는지, 가중치는 어디로가는지, 정도 경로 설정등을 할 수 있다.
// obj.name 은 객체들의 이름을 설정할 수 있다. 순서대로 한줄에 한이름씩 설정하고 저장하게 되면 
// Yolo_mark안에서 마킹작업을 할 때 이름 지정이 가능하다.
// yolo-obj.cfg 는 학습을 할 떄 어떻게 할지를 세부하게 설정할 수 있는 파일이다. 여기서 설정해줘야 할 부분은
// subdivisions = 8로 설정 되어있는데, 메모리를 얼마나 쓸지, 결정하는 부분인데, 이부분을 32, 64로 변경하지 않으면, 
// assertion `0' failed 이라는 오류가 발생한다.

//본 프로젝트에서는 수화 이미지 학습을 위해서 , 객체를 6개로, classes= 6,  객체 이름을 : love, hi, sorry, goodbye, nicetomeet, meet
//으로 설정했고, subdivisions=32 설정을 끝으로 Yolomark 설정을 마무리 했다. (subdivisions=32 맨 첫번째 부분을 수정해야함.)

//다시 Yolo_mark 폴더 안으로 들어가 학습을 진행해보면,

-> cd Yolo_mark
-> ./linux_mark.sh
// 마킹작업을 시작해준다.

//마킹작업이 완료되었고 프로그램을 종료한다음에 확이하려면, 위에 언급한 data 폴더에서 img 폴더로 들어가보면, 이미지파일 옆에 파일이 하나 생성됨을
//확인할 수 있다. (마킹된정보를 가지고 있는 파일) 또 data 폴더 내에 train.txt에도 역시 학습할 경로가 적혀있음을 확인할 수 잇다
// 나중에 학습을 시작할때 이 train.txt의 경로가 다르다면 학습이 진행되지않으므로 꼭 폴더 경로를 잘 써줘야 한다. 변경도 가능하니 경로 설정만
// 잘해주면 학습에 문제 없을 것이다.
